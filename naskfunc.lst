     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     6 00000000                                 [INSTRSET "i486p"]	
     7 00000000                                 
     8 00000000                                 ; オブジェクトファイルのための情報
     9 00000000                                 
    10 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
    11 00000000                                 
    12 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt		; このプログラムに含まれる関数名
    13 00000000                                 		GLOBAL	_io_in8, _io_in16, _io_in32
    14 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    15 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    16 00000000                                 		GLOBAL	_write_mem8
    17 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    18 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    19 00000000                                         GLOBAL  _load_tr
    20 00000000                                 		GLOBAL	_asm_inthandler20,_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    21 00000000                                 		GLOBAL	_memtest_sub
    22 00000000                                         GLOBAL  _farjmp
    23 00000000                                 		EXTERN _inthandler20,_inthandler21, _inthandler27, _inthandler2c
    24 00000000                                 
    25 00000000                                 ; 以下は実際の関数
    26 00000000                                 
    27                                          [SECTION .text]		; オブジェクトファイルではこれを書いてからプログラムを書く
    28 00000000                                 
    29 00000000                                 _io_hlt:	; void io_hlt(void);
    30 00000000 F4                              		HLT
    31 00000001 C3                              		RET
    32 00000002                                 		
    33 00000002                                 _io_cli:
    34 00000002 FA                              		CLI
    35 00000003 C3                              		RET
    36 00000004                                 		
    37 00000004                                 _io_sti:
    38 00000004 FB                              		STI
    39 00000005 C3                              		RET
    40 00000006                                 		
    41 00000006                                 _io_stihlt:
    42 00000006 FB                              		STI
    43 00000007 F4                              		HLT
    44 00000008 C3                              		RET
    45 00000009                                 
    46 00000009                                 _io_in8:
    47 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]
    48 0000000D B8 00000000                     		MOV		EAX,0
    49 00000012 EC                              		IN		AL, DX
    50 00000013 C3                              		RET	
    51 00000014                                 		
    52 00000014                                 _io_in16:
    53 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]
    54 00000018 B8 00000000                     		MOV		EAX,0
    55 0000001D 66 ED                           		IN		AX, DX
    56 0000001F C3                              		RET
    57 00000020                                 		
    58 00000020                                 _io_in32:
    59 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]
    60 00000024 B8 00000000                     		MOV		EAX,0
    61 00000029 ED                              		IN		EAX, DX
    62 0000002A C3                              		RET	
    63 0000002B                                 
    64 0000002B                                 _io_out8:
    65 0000002B 8B 54 24 04                     		MOV		EDX,[ESP+4]
    66 0000002F 8A 44 24 08                     		MOV		AL,[ESP+8]
    67 00000033 EE                              		OUT		DX, AL
    68 00000034 C3                              		RET	
    69 00000035                                 		
    70 00000035                                 _io_out16:
    71 00000035 8B 54 24 04                     		MOV		EDX,[ESP+4]
    72 00000039 66 8B 44 24 08                  		MOV		AX,[ESP+8]
    73 0000003E 66 EF                           		OUT		DX, AX
    74 00000040 C3                              		RET	
    75 00000041                                 
    76 00000041                                 _io_out32:
    77 00000041 8B 54 24 04                     		MOV		EDX,[ESP+4]
    78 00000045 8B 44 24 08                     		MOV		EAX,[ESP+8]
    79 00000049 EF                              		OUT		DX, EAX
    80 0000004A C3                              		RET		
    81 0000004B                                 
    82 0000004B                                 ;把eflggs的?先?入?，然后再从?中把它的??出来?EAX返回
    83 0000004B                                 _io_load_eflags:
    84 0000004B 9C                              		PUSHFD		; push EFLAGS
    85 0000004C 58                              		POP		EAX
    86 0000004D C3                              		RET		
    87 0000004E                                 		
    88 0000004E                                 ;把EAX的??入?，再把?个???eflags		
    89 0000004E                                 _io_store_eflags:
    90 0000004E 8B 44 24 04                     		MOV		EAX,[ESP + 4 ]
    91 00000052 50                              		PUSH	EAX
    92 00000053 9D                              		POPFD
    93 00000054 C3                              		RET
    94 00000055                                 		
    95 00000055                                 _write_mem8:
    96 00000055 8B 4C 24 04                     		MOV		ECX,[ESP+4]		;第一个形参：内存地址
    97 00000059 8A 44 24 08                     		MOV		AL,[ESP+8]		;第二个形参： ?
    98 0000005D 88 01                           		MOV		[ECX],AL
    99 0000005F C3                              		RET
   100 00000060                                 		
   101 00000060                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
   102 00000060 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   103 00000065 66 89 44 24 06                  		MOV		[ESP+6],AX
   104 0000006A 0F 01 54 24 06                  		LGDT	[ESP+6]
   105 0000006F C3                              		RET
   106 00000070                                 
   107 00000070                                 _load_idtr:		; void load_idtr(int limit, int addr);
   108 00000070 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   109 00000075 66 89 44 24 06                  		MOV		[ESP+6],AX
   110 0000007A 0F 01 5C 24 06                  		LIDT	[ESP+6]
   111 0000007F C3                              		RET
   112 00000080                                 		
   113 00000080                                 _load_cr0:
   114 00000080 0F 20 C0                        		MOV 	EAX,CR0
   115 00000083 C3                              		RET
   116 00000084                                 		
   117 00000084                                 _store_cr0:
   118 00000084 8B 44 24 04                     		MOV 	EAX, [ESP + 4]
   119 00000088 0F 22 C0                        		MOV 	CR0, EAX
   120 0000008B C3                              		RET
   121 0000008C                                 _load_tr:       ;void load_tr(int tr);
   122 0000008C 0F 00 5C 24 04                          LTR     [ESP + 4]
   123 00000091 C3                                      RET
   124 00000092                                         
   125 00000092                                 _asm_inthandler20:
   126 00000092 06                              		PUSH		ES
   127 00000093 1E                              		PUSH		DS
   128 00000094 60                              		PUSHAD
   129 00000095 89 E0                           		MOV			EAX,ESP
   130 00000097 50                              		PUSH		EAX
   131 00000098 66 8C D0                        		MOV 		AX,SS
   132 0000009B 8E D8                           		MOV			DS,AX
   133 0000009D 8E C0                           		MOV			ES,AX
   134 0000009F E8 [00000000]                   		CALL		_inthandler20
   135 000000A4 58                              		POP			EAX
   136 000000A5 61                              		POPAD
   137 000000A6 1F                              		POP			DS
   138 000000A7 07                              		POP			ES
   139 000000A8 CF                              		IRETD        
   140 000000A9                                         
   141 000000A9                                 _asm_inthandler21:
   142 000000A9 06                              		PUSH		ES
   143 000000AA 1E                              		PUSH		DS
   144 000000AB 60                              		PUSHAD
   145 000000AC 89 E0                           		MOV			EAX,ESP
   146 000000AE 50                              		PUSH		EAX
   147 000000AF 66 8C D0                        		MOV 		AX,SS
   148 000000B2 8E D8                           		MOV			DS,AX
   149 000000B4 8E C0                           		MOV			ES,AX
   150 000000B6 E8 [00000000]                   		CALL		_inthandler21
   151 000000BB 58                              		POP			EAX
   152 000000BC 61                              		POPAD
   153 000000BD 1F                              		POP			DS
   154 000000BE 07                              		POP			ES
   155 000000BF CF                              		IRETD
   156 000000C0                                 		
   157 000000C0                                 _asm_inthandler27:
   158 000000C0 06                              		PUSH		ES
   159 000000C1 1E                              		PUSH		DS
   160 000000C2 60                              		PUSHAD
   161 000000C3 89 E0                           		MOV			EAX,ESP
   162 000000C5 50                              		PUSH		EAX
   163 000000C6 66 8C D0                        		MOV 		AX,SS
   164 000000C9 8E D8                           		MOV			DS,AX
   165 000000CB 8E C0                           		MOV			ES,AX
   166 000000CD E8 [00000000]                   		CALL		_inthandler27
   167 000000D2 58                              		POP			EAX
   168 000000D3 61                              		POPAD
   169 000000D4 1F                              		POP			DS
   170 000000D5 07                              		POP			ES
   171 000000D6 CF                              		IRETD
   172 000000D7                                 		
   173 000000D7                                 _asm_inthandler2c:
   174 000000D7 06                              		PUSH		ES
   175 000000D8 1E                              		PUSH		DS
   176 000000D9 60                              		PUSHAD
   177 000000DA 89 E0                           		MOV			EAX,ESP
   178 000000DC 50                              		PUSH		EAX
   179 000000DD 66 8C D0                        		MOV 		AX,SS
   180 000000E0 8E D8                           		MOV			DS,AX
   181 000000E2 8E C0                           		MOV			ES,AX
   182 000000E4 E8 [00000000]                   		CALL		_inthandler2c
   183 000000E9 58                              		POP			EAX
   184 000000EA 61                              		POPAD
   185 000000EB 1F                              		POP			DS
   186 000000EC 07                              		POP			ES
   187 000000ED CF                              		IRETD
   188 000000EE                                 		
   189 000000EE                                 _memtest_sub:		; unsigned int memtest_sub( unsigned int start, unsigned int end)
   190 000000EE 57                              	PUSH		EDI		;保存?些寄存器，?后面使用?些寄存器后能?恢?
   191 000000EF 56                              	PUSH		ESI
   192 000000F0 53                              	PUSH		EBX
   193 000000F1 BE AA55AA55                     	MOV			ESI, 0xaa55aa55		;pat0
   194 000000F6 BF 55AA55AA                     	MOV			EDI, 0x55AA55AA		;pat1
   195 000000FB 8B 44 24 10                     	MOV			EAX, [ESP + 12 + 4]	; i = start		;?里的12??是：EDI ESI EBA，4是返回地址
   196 000000FF                                 mts_loop:
   197 000000FF 89 C3                           	MOV 		EBX, EAX
   198 00000101 81 C3 00000FFC                  	ADD 		EBX, 0xFFC						; p = i + 0xffc
   199 00000107 8B 13                           	MOV			EDX, [EBX]						;old = *p
   200 00000109 89 33                           	MOV			[EBX], ESI
   201 0000010B 83 33 FF                        	XOR			DWORD [EBX], 0xffffffff			;*p ^= 0xffffffff
   202 0000010E 3B 3B                           	CMP			EDI, [EBX]						;if( *p != pat1) goto finl
   203 00000110 75 18                           	JNE			mts_fin
   204 00000112 83 33 FF                        	XOR			DWORD [EBX], 0xffffffff			;*p ^= 0xffffffff
   205 00000115 3B 33                           	CMP			ESI, [EBX]						;if( *p != pat0) goto finl
   206 00000117 75 11                           	JNE			mts_fin
   207 00000119 89 13                           	MOV			[EBX], EDX						;*p = old
   208 0000011B 05 00001000                     	ADD			EAX, 0x1000						; i += 0x1000
   209 00000120 3B 44 24 14                     	CMP			EAX,[ESP + 12 + 8]				;if( i <= end ) goto mts_loop
   210 00000124 76 D9                           	JBE			mts_loop
   211 00000126 5B                              	POP			EBX								;恢???
   212 00000127 5E                              	POP			ESI
   213 00000128 5F                              	POP			EDI
   214 00000129 C3                              	RET
   215 0000012A                                 mts_fin:
   216 0000012A 89 13                           	MOV			[EBX], EDX						;*p = old
   217 0000012C 5B                              	POP			EBX								;恢???
   218 0000012D 5E                              	POP			ESI
   219 0000012E 5F                              	POP			EDI
   220 0000012F C3                              	RET
   221 00000130                                     
   222 00000130                                 _farjmp:	; void farjmp(int eip, int cs);
   223 00000130 FF 6C 24 04                     		JMP		FAR [ESP + 4]
   224 00000134 C3                              		RET
   225 00000135                                         
   226 00000135                                 
   227 00000135                                 		
   228 00000135                                 
   229 00000135                                 		
